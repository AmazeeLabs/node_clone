<?php

/**
 * Implementation of hook_help().
 */
function clone_help($section) {
  switch ($section) {
    case 'admin/help#clone':
      $output = '<p>'. t('The clone module allows users to make a copy of an existing node and then edit that copy. The authorship is set to the current user, the menu and url aliases are reset, and the words "Clone of" are inserted into the title to remind you that you are not editing the original node.') .'</p>';
      $output .= '<p>'. t('Users with the "clone node" permission can utilize this functionality. A new tab will appear on node pages with the word "clone". Once you click this tab you have <em>already</em> created a new node that is a copy of the node you were viewing, and you will be redirected to an edit screen for that new node.') .'</p>';
      return $output;
  }
}

/**
* Implementation of hook_perm().
*/
function clone_perm() {
  return array('clone node');
}

/**
 * Implementation of hook_menu().
 */
function clone_menu($may_cache) {
  $items = array();

  if ($may_cache) {  
    $items[] = array(
       'path' => 'admin/settings/clone',
       'title' => t('Clone module'),
       'description' => t('Allows users to clone (copy then edit) an existing node.'),
       'callback' => 'drupal_get_form',
       'callback arguments' => 'clone_settings',
       'access' => user_access('administer site configuration'), 
      );
  }
  else { 
    if (arg(0) == 'node' && is_numeric(arg(1))){
       $node=node_load(arg(1));
       if ($node->nid) {
         $access = (user_access('clone node') && filter_access($node->format) && node_access('create',$node->type));
         $items[] = array(
           'path' => 'node/'. $node->nid.'/clone', 
           'title' => t('clone'),
           'callback' => 'clone_node_check', 
           'access' => $access,
           'type' => MENU_LOCAL_TASK, 'weight' => 5,); 
       }
    }
  }

  return $items;
}

/**
* menu callback to configure module settings.
*/
function clone_settings() {

  $form['heading'] = array(
    '#value' => '<b>'.t('Configuration options for the clone module:').'</b>',
  );
  $form['clone_nodes_without_confirm'] = array(
    '#type' => 'checkbox',
    '#title' => t('Clone nodes without requiring confirmation'),
    '#default_value' => variable_get('clone_nodes_without_confirm', FALSE),
    '#description' => t('If this is set, a new node will be created immediately upon clicking the "clone" tab when viewing a node.'),
  );

  $form['publishing'] = array(
    '#type' => 'fieldset',
    '#title' => '<b>'.t('Should the publishing options ( e.g. published, promoted, etc) be reset to the defaults?').'</b>',
  );
  
  foreach (node_get_types() as $type => $name) {
    $form['publishing']['clone_reset_'. $type] = array(
      '#type' => 'checkbox',
      '#title' => t('%s: reset publishing options when cloned', array('%s' => $name)),
      '#default_value' => variable_get('clone_reset_'. $type, FALSE),
    );    
  }

  return system_settings_form($form);
}

/**
 *  Menu callback: prompt the user to confirm the operation
 */
function clone_node_check() {
  
  if (variable_get('clone_nodes_without_confirm', FALSE)) {
    clone_node(arg(1));
    return;
  }
  return drupal_get_form('clone_node_confirm');
}

/**
 *  form builder: prompt the user to confirm the operation
 */
function clone_node_confirm() {
  
    $node = node_load(arg(1)); 
    $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
    return confirm_form($form,
      t('Are you sure you want to clone %title?', array('%title' =>  $node->title)),
      'node/'. $node->nid,'<p>'. t('This action will create a new node. You willl then be redirected to the edit page for the new node.'). '</p>',
      t('Clone'), t('Cancel'));
}

/**
 *  Handle confirm form submission
 */
function clone_node_confirm_submit($form_id, $form_values) {
  if ($form_values['confirm']) {
    clone_node($form_values['nid']);    
  }
  return '';
} 

/**
 *  Clones a node
 */
function clone_node($nid)
{
  if (is_numeric($nid)) {
    global $user;
    
    $node = node_load($nid);
    if (isset($node->nid)) {
      
      $node->nid = NULL;
      $node->uid = $user->uid;
      $node->created = 0;   
      $node->menu = NULL;
      $node->path = NULL;   
      $node->title = t('Clone of @title', array('@title' => $node->title));
      
      if (variable_get('clone_reset_'. $node->type, FALSE)) {
        $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
        // fill in the default values
        foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
          $node->$key = in_array($key, $node_options);
        } 
      }
      
      node_save($node);
      drupal_goto('node/'. $node->nid . '/edit');
    }
  }
}

