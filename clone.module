<?php/** * Implementation of hook_help(). */function clone_help($section) {  switch ($section) {    case 'admin/help#clone':      $output = '<p>'. t('The clone module allows users to make a copy of an existing node and then edit that copy. The authorship is set to the current user, the menu and url aliases are reset, and the words "Clone of" are inserted into the title to remind you that you are not editing the original node.') .'</p>';      $output .= '<p>'. t('Users with the "clone node" permission can utilize this functionality. A new tab will appear on node pages with the word "clone". Once you click this tab you have <em>already</em> created a new node that is a copy of the node you were viewing, and you will be redirected to an edit screen for that new node.') .'</p>';      return $output;    case 'admin/modules#description':      return t('Allows users to clone (copy then edit) an existing node.');  }}/*** Implementation of hook_perm().*/function clone_perm() {  return array('clone node');}function clone_menu($may_cache) {  $items = array();  if (!$may_cache) {     if (arg(0) == 'node' && is_numeric(arg(1))){         $items[] = array('path' => 'node/'. arg(1).'/clone', 'title' => t('clone'),        'callback' => 'clone_node', 'access' => TRUE,        'type' => MENU_LOCAL_TASK, 'weight' => 5);     }  }  return $items;}function clone_node(){    global $user;       $nid=arg(1);        $node = node_load($nid);       $node->nid = NULL;    $node->name = $user->name;    $node->created = 0;        $node->menu = NULL;    $node->path = NULL;        $node->title = 'Clone of '.$node->title;       node_save($node);       drupal_goto('node/'. $node->nid . '/edit');}   